@use 'sass:map';

@use 'dialog.variables' as *;
@use 'dialog.animations' as *;

@mixin fill {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin scroll {
  overflow-x: hidden;
  overflow-y: auto;
}

@mixin sticky {
  .cell {
    padding: 0;
  }

  ::slotted(*) {
    border: 0;
    border-radius: 0;
  }
}

:host {
  @include fill;
  z-index: $dialog-z-index;
  display: block;
  outline: 0;
  overflow: hidden;
}

.backdrop {
  @include fill;
  z-index: 1;

  * {
    width: 100%;
    height: 100%;
    background-color: $dialog-backdrop-background-color;
    opacity: $dialog-backdrop-opacity;
  }
}

.dialog {
  @include fill;
  @include scroll;
  z-index: 1;
}

.table {
  display: table;
  margin: auto;
  height: 100%;
  position: relative;
}

.cell {
  display: table-cell;
}

// scrollable
.scrollable ::slotted(*) {
  @include scroll;
}

// placement x
@each $key, $value in $dialog-placement-x {
  .x-#{$key} .table {
    @each $key, $property in $value {
      #{$key}: #{$property};
    }
  }
}

// placement y
@each $key, $value in $dialog-placement-y {
  .y-#{$key} .cell {
    @each $key, $property in $value {
      #{$key}: #{$property};
    }
  }
}

// breakpoints
@each $key, $value in $breakpoints {
  // TODO
  @include media-breakpoint-up($key) {
    // margin in current breakpoint
    $margin: map.get($dialog-margin, $key);

    @if ($margin) {
      // TODO
      .full-height {
        ::slotted(*) {
          min-height: calc(100vh - #{$margin * 2});
        }

        &.sticky ::slotted(*) {
          min-height: 100vh;
        }
      }

      // dialog margin
      .cell {
        padding: $margin;
      }

      // scrollable
      .scrollable ::slotted(*) {
        max-height: calc(100vh - #{$margin * 2});
      }
    }

    // dialog size in current breakpoint
    $size: map.get($dialog-size, $key);

    // dialog sizes
    @each $key, $value in $size {
      // generate size's class
      @include class('size', $key) {
        .cell {
          max-width: $value;
        }
      }
    }
  }

  // TODO
  @include media-breakpoint-down($key) {
    // current fullscreen's suffix
    $key: if(breakpoint-min($key) == null, '', '#{$key}-down');

    // generate fullscreen's class
    @include class('fullscreen', $key) {
      @include sticky;

      .cell {
        max-width: none;
      }

      ::slotted(*) {
        min-height: 100vh;
      }
    }
  }
}

// TODO
:host([state='closed']) {
  display: none;
}

// TODO
.cell {
  width: 100vw;
}

// TODO
::slotted(*) {
  pointer-events: auto;
}

// TODO
.full-width .cell {
  max-width: none !important;
}

// TODO
.sticky {
  @include sticky;
}
